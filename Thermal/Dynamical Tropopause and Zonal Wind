import numpy as np
import xarray as xr
import matplotlib.pyplot as plt

# ---------------------------------------------------
# 1. Load Data
# ---------------------------------------------------
file_path = r"C:\Users\moham\OneDrive\Documents\stage\98a4d3ee3b3b8aa12699f1286ad0843f.nc"
ds = xr.open_dataset(file_path)

t = ds['t'].isel(valid_time=0).values
z = ds['z'].isel(valid_time=0).values
pv = ds['pv'].isel(valid_time=0).values
u = ds['u'].isel(valid_time=0).values

plev = ds['pressure_level'].values
lat = ds['latitude'].values
lon = ds['longitude'].values

g = 9.80665
z_height = z / g
pv = pv / 1e-6  # Convert to PVU

# ---------------------------------------------------
# 2. Thermal Tropopause (WMO)
# ---------------------------------------------------
thermal_tp = []

for j in range(len(lat)):
    found = False
    for k in range(len(plev) - 1):
        T1 = t[k, j, :].mean()
        T2 = t[k + 1, j, :].mean()
        Z1 = z_height[k, j, :].mean()
        Z2 = z_height[k + 1, j, :].mean()

        dT = T2 - T1
        dZ = Z2 - Z1

        if dZ != 0:
            lapse_rate = -dT / dZ * 1000
            if lapse_rate <= 2:
                thermal_tp.append((lat[j], plev[k]))
                found = True
                break
    if not found:
        thermal_tp.append((lat[j], np.nan))

# ---------------------------------------------------
# 3. Dynamical Tropopause: PVU = 3 in NH, -3 in SH
# ---------------------------------------------------
dyn_tp = []

plev_descending = plev[0] > plev[-1]
if plev_descending:
    nh_order = range(len(plev)-1, -1, -1)
    sh_order = range(len(plev))
else:
    nh_order = range(len(plev))
    sh_order = range(len(plev)-1, -1, -1)

for j, LAT in enumerate(lat):
    found = False
    if LAT >= 0:
        for idx in nh_order:
            pvu = np.nanmax(pv[idx, j, :])
            if pvu <= 4.0:
                dyn_tp.append((LAT, plev[idx]))
                found = True
                break
    else:
        for idx in sh_order:
            pvu = np.nanmean(pv[idx, j, :])
            if pvu <= -3.5:
                dyn_tp.append((LAT, plev[idx]))
                found = True
                break
    if not found:
        dyn_tp.append((LAT, np.nan))

# ---------------------------------------------------
# 4. Zonal Wind Mean
# ---------------------------------------------------
u_mean = u.mean(axis=2)

# ---------------------------------------------------
# 5. Plot
# ---------------------------------------------------
thermal_lat, thermal_p = zip(*thermal_tp)
dyn_lat, dyn_p = zip(*dyn_tp)

fig, ax = plt.subplots(figsize=(8, 6))
ax.invert_yaxis()
ax.set_yscale("log")
ax.set_ylabel("Pressure (hPa)")
ax.set_xlabel("Latitude (°)")

ax.set_yticks([1000, 850, 700, 500, 300, 200, 100, 50, 10])
ax.get_yaxis().set_major_formatter(plt.ScalarFormatter())

# Wind contours
cs = ax.contour(lat, plev, u_mean, colors='black', linewidths=0.7, levels=np.arange(-40, 45, 5))
ax.clabel(cs, fmt='%d', fontsize=7)

# Tropopause plots
ax.plot(thermal_lat, thermal_p, 'ro', markersize=2, label='Thermal Tropopause')

# --- Dynamical Tropopause Line (thicker) ---
# Split the line into segments for labeling
line = ax.plot(dyn_lat, dyn_p, 'g-', linewidth=3, label='Dynamical Tropopause ', zorder=5)

# Find indices closest to ±40° latitude
nh_idx = np.abs(np.array(dyn_lat) - 40).argmin()
sh_idx = np.abs(np.array(dyn_lat) - (-40)).argmin()

# Create small gaps in the line for labels
gap_size = 2  # degrees of latitude for gap

# Northern Hemisphere label (3)
nh_start = max(0, nh_idx - gap_size)
nh_end = min(len(dyn_lat)-1, nh_idx + gap_size)
ax.plot(dyn_lat[:nh_start], dyn_p[:nh_start], 'g-', linewidth=3, zorder=5)
ax.plot(dyn_lat[nh_end:], dyn_p[nh_end:], 'g-', linewidth=3, zorder=5)
ax.text(dyn_lat[nh_idx], dyn_p[nh_idx], "3", color='green', 
        fontsize=10, ha='center', va='center', fontweight='bold',
        bbox=dict(facecolor='white', edgecolor='none', pad=1), zorder=10)

# Southern Hemisphere label (-3)
sh_start = max(0, sh_idx - gap_size)
sh_end = min(len(dyn_lat)-1, sh_idx + gap_size)
ax.plot(dyn_lat[:sh_start], dyn_p[:sh_start], 'g-', linewidth=3, zorder=5)
ax.plot(dyn_lat[sh_end:], dyn_p[sh_end:], 'g-', linewidth=3, zorder=5)
ax.text(dyn_lat[sh_idx], dyn_p[sh_idx], "-3", color='green', 
        fontsize=10, ha='center', va='center', fontweight='bold',
        bbox=dict(facecolor='white', edgecolor='none', pad=1), zorder=10)

# Final touch
ax.set_title("Thermal and Dynamical Tropopause — 1 Jan 2010 00:00 UTC")
ax.legend()
ax.grid(True, which="both", linestyle='--')
plt.tight_layout()
plt.show()
